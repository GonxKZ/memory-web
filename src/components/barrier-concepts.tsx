import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface MemoryBarrierConceptProps {
  barrier: "memory" | "compiler" | "cpu" | "sequential"
  name: string
  description: string
  purpose: string
  implementation: string
  useCases: string[]
  technicalDetails: string
  examples: string[]
}

export function MemoryBarrierConcept({ 
  barrier,
  name,
  description,
  purpose,
  implementation,
  useCases,
  technicalDetails,
  examples
}: MemoryBarrierConceptProps) {
  // Barrier icons and colors
  const barrierInfo = {
    "memory": {
      icon: "üõ°Ô∏è",
      color: "#3b82f6"
    },
    "compiler": {
      icon: "üíª",
      color: "#10b981"
    },
    "cpu": {
      icon: "‚öôÔ∏è",
      color: "#8b5cf6"
    },
    "sequential": {
      icon: "üîí",
      color: "#f59e0b"
    }
  }

  const currentBarrier = barrierInfo[barrier]

  return (
    <Card className="h-full">
      <CardHeader>
        <CardTitle 
          className="flex items-center"
          style={{ color: currentBarrier.color }}
        >
          <span className="mr-2 text-2xl">{currentBarrier.icon}</span>
          {name}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-gray-700">
            {description}
          </div>
          
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="font-semibold text-blue-800 mb-2">Detalles T√©cnicos</div>
            <div className="text-blue-700 text-sm">
              {technicalDetails}
            </div>
          </div>
          
          <div className="bg-green-50 p-4 rounded-lg">
            <div className="font-semibold mb-2 flex items-center">
              <span className="mr-2 text-green-800">üéØ</span>
              <span className="text-green-800">Prop√≥sito</span>
            </div>
            <div className="text-green-700">
              {purpose}
            </div>
          </div>
          
          <div>
            <div className="font-semibold mb-2">Implementaci√≥n:</div>
            <div className="font-mono text-sm bg-gray-800 text-white p-3 rounded">
              {implementation}
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <div className="font-semibold mb-2">Casos de uso:</div>
              <ul className="space-y-2">
                {useCases.map((useCase, index) => (
                  <li key={index} className="flex items-start">
                    <span className="mr-2 text-gray-500">‚Ä¢</span>
                    <span className="text-gray-700">{useCase}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <div className="font-semibold mb-2">Ejemplos:</div>
              <ul className="space-y-2">
                {examples.map((example, index) => (
                  <li key={index} className="flex items-start">
                    <span className="mr-2 text-gray-500">‚Ä¢</span>
                    <span className="text-gray-700">{example}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

interface MemoryBarrierConceptsProps {
  barriers: {
    barrier: "memory" | "compiler" | "cpu" | "sequential"
    name: string
    description: string
    purpose: string
    implementation: string
    useCases: string[]
    technicalDetails: string
    examples: string[]
  }[]
}

export function MemoryBarrierConcepts({ barriers }: MemoryBarrierConceptsProps) {
  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-gray-900 mb-4">Barreras de Memoria</h2>
        <p className="text-gray-600 max-w-3xl mx-auto">
          Las barreras de memoria son instrucciones que aseguran el orden 
          de ejecuci√≥n de operaciones de memoria, previniendo reordenamientos 
          por compilador o procesador. Son esenciales en programaci√≥n concurrente 
          para garantizar la correcta sincronizaci√≥n entre hilos. Es como tener 
          un sem√°foro en una intersecci√≥n complicada que asegura que los coches 
          pasen en el orden correcto.
        </p>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {barriers.map((barrier, index) => (
          <MemoryBarrierConcept
            key={index}
            barrier={barrier.barrier}
            name={barrier.name}
            description={barrier.description}
            purpose={barrier.purpose}
            implementation={barrier.implementation}
            useCases={barrier.useCases}
            technicalDetails={barrier.technicalDetails}
            examples={barrier.examples}
          />
        ))}
      </div>
      
      <Card className="bg-red-50 border-red-200">
        <CardContent className="p-6">
          <div className="flex items-start">
            <span className="text-2xl mr-3">üöß</span>
            <div>
              <h3 className="font-semibold text-red-800 mb-2">¬øPor qu√© son necesarias?</h3>
              <p className="text-red-700 mb-3">
                Las barreras de memoria son necesarias porque:
              </p>
              <ul className="space-y-2">
                <li className="flex items-start">
                  <span className="mr-2 font-bold">‚Ä¢</span>
                  <div>
                    <span className="font-semibold">Optimizaciones del compilador:</span>
                    <span> Pueden reordenar instrucciones para mejorar el rendimiento</span>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="mr-2 font-bold">‚Ä¢</span>
                  <div>
                    <span className="font-semibold">Optimizaciones del procesador:</span>
                    <span> Ejecutan instrucciones fuera de orden cuando es seguro hacerlo</span>
                  </div>
                </li>
                <li className="flex items-start">
                  <span className="mr-2 font-bold">‚Ä¢</span>
                  <div>
                    <span className="font-semibold">Sistemas multiprocesador:</span>
                    <span> Cada n√∫cleo puede tener su propia visi√≥n del orden de las operaciones</span>
                  </div>
                </li>
              </ul>
              <p className="text-red-700 mt-3">
                Sin barreras de memoria, estos reordenamientos pueden causar 
                comportamientos inesperados en programas concurrentes, especialmente 
                en estructuras de datos compartidas y algoritmos de sincronizaci√≥n. 
                Las barreras act√∫an como puntos de sincronizaci√≥n que aseguran 
                que todas las operaciones anteriores se completen antes de que 
                comiencen las posteriores.
              </p>
              
              <div className="mt-4 p-3 bg-white rounded-lg border">
                <div className="font-semibold text-gray-800 mb-2">Visualizaci√≥n del reordenamiento:</div>
                <div className="font-mono text-sm">
                  <div>// C√≥digo original:</div>
                  <div>a = 1;</div>
                  <div>b = 2;</div>
                  <div className="my-2 text-center text-red-500">// ‚Üì Sin barrera, podr√≠a reordenarse a ‚Üì</div>
                  <div>// C√≥digo reordenado (posible):</div>
                  <div>b = 2;</div>
                  <div>a = 1;</div>
                  <div className="my-2 text-center text-green-500">// ‚Üë Con barrera, se garantiza el orden original ‚Üë</div>
                  <div>// C√≥digo con barrera:</div>
                  <div>a = 1;</div>
                  <div>memory_barrier();</div>
                  <div>b = 2;</div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}